[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Create a new Contexts instance\n\nParameters:\n* config: A table containing the following keys:\n  * title (string) [Required]: Title of context for display to user\n  * layout (table) [Optional]: A table suitable for use with hs.layout.apply\n  * enterFunction (function) [Optional]: A function called when context is applied\n  * exitFunction (function) [Optional]: A function called when context is exited\n  * focused (dictionary) [Optional]: Window to focus on. First element is application,\n    second optional element is window name.\n  * defaultInputDevice (table) [Optional]: List of strings identifying input audio\n    devices.  First input device found, will be set to the default.\n  * defaultOutputDevice (table) [Optional]: List of strings identifying output\n    audio devices. First output device found, will be set to the default.\n\nReturns:\n* Contexts instance",
        "desc" : "Create a new Contexts instance",
        "stripped_doc" : [
          "Create a new Contexts instance",
          ""
        ],
        "parameters" : [
          "* config: A table containing the following keys:",
          "  * title (string) [Required]: Title of context for display to user",
          "  * layout (table) [Optional]: A table suitable for use with hs.layout.apply",
          "  * enterFunction (function) [Optional]: A function called when context is applied",
          "  * exitFunction (function) [Optional]: A function called when context is exited",
          "  * focused (dictionary) [Optional]: Window to focus on. First element is application,",
          "    second optional element is window name.",
          "  * defaultInputDevice (table) [Optional]: List of strings identifying input audio",
          "    devices.  First input device found, will be set to the default.",
          "  * defaultOutputDevice (table) [Optional]: List of strings identifying output",
          "    audio devices. First output device found, will be set to the default.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts.new()",
        "type" : "Function",
        "returns" : [
          "* Contexts instance"
        ],
        "def" : "Contexts.new()",
        "name" : "new"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "A context is a set of windows around hs.layout and other",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "doc" : "Create a new Contexts instance\n\nParameters:\n* config: A table containing the following keys:\n  * title (string) [Required]: Title of context for display to user\n  * layout (table) [Optional]: A table suitable for use with hs.layout.apply\n  * enterFunction (function) [Optional]: A function called when context is applied\n  * exitFunction (function) [Optional]: A function called when context is exited\n  * focused (dictionary) [Optional]: Window to focus on. First element is application,\n    second optional element is window name.\n  * defaultInputDevice (table) [Optional]: List of strings identifying input audio\n    devices.  First input device found, will be set to the default.\n  * defaultOutputDevice (table) [Optional]: List of strings identifying output\n    audio devices. First output device found, will be set to the default.\n\nReturns:\n* Contexts instance",
        "desc" : "Create a new Contexts instance",
        "stripped_doc" : [
          "Create a new Contexts instance",
          ""
        ],
        "parameters" : [
          "* config: A table containing the following keys:",
          "  * title (string) [Required]: Title of context for display to user",
          "  * layout (table) [Optional]: A table suitable for use with hs.layout.apply",
          "  * enterFunction (function) [Optional]: A function called when context is applied",
          "  * exitFunction (function) [Optional]: A function called when context is exited",
          "  * focused (dictionary) [Optional]: Window to focus on. First element is application,",
          "    second optional element is window name.",
          "  * defaultInputDevice (table) [Optional]: List of strings identifying input audio",
          "    devices.  First input device found, will be set to the default.",
          "  * defaultOutputDevice (table) [Optional]: List of strings identifying output",
          "    audio devices. First output device found, will be set to the default.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts.new()",
        "type" : "Function",
        "returns" : [
          "* Contexts instance"
        ],
        "def" : "Contexts.new()",
        "name" : "new"
      },
      {
        "doc" : "Apply given context:\n\n1) Calls unapply() on the previously applied context.\n\n2) Calls config.enterFunction() if present\n\n3) Starts any applications listed in config.layout if they are not running.\n\n4) Unminimizes and raises any windows listed in config.layout if needed.\n\n5) Applies config.layout with hs.layout.apply()\n\n6) Focuses the window given in config.focused\n\n7) Sets the default input device found in defaultInputDevice\n\n8) Sets the default output device found in defaultOutputDevice\n\nParameters:\n* None\n\nReturns:\n* true on success, false on failure",
        "desc" : "Apply given context:",
        "stripped_doc" : [
          "Apply given context:",
          "",
          "1) Calls unapply() on the previously applied context.",
          "",
          "2) Calls config.enterFunction() if present",
          "",
          "3) Starts any applications listed in config.layout if they are not running.",
          "",
          "4) Unminimizes and raises any windows listed in config.layout if needed.",
          "",
          "5) Applies config.layout with hs.layout.apply()",
          "",
          "6) Focuses the window given in config.focused",
          "",
          "7) Sets the default input device found in defaultInputDevice",
          "",
          "8) Sets the default output device found in defaultOutputDevice",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:apply()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on failure"
        ],
        "def" : "Contexts:apply()",
        "name" : "apply"
      },
      {
        "doc" : "Switch to previous context stored in Contexts.previous by unapply()\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "desc" : "Switch to previous context stored in Contexts.previous by unapply()",
        "stripped_doc" : [
          "Switch to previous context stored in Contexts.previous by unapply()",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:applyPrevious()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on error"
        ],
        "def" : "Contexts:applyPrevious()",
        "name" : "applyPrevious"
      },
      {
        "doc" : "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames\/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * Contexts object",
        "desc" : "The method accepts a single parameter, which is a table. The keys of the table",
        "stripped_doc" : [
          "The method accepts a single parameter, which is a table. The keys of the table",
          "are strings that describe the action performed, and the values of the table are",
          "tables containing modifiers and keynames\/keycodes. E.g.",
          "  {",
          "    chooser = {{\"cmd\", \"alt\"}, \"c\"},",
          "    previous = {{\"cmd\", \"alt\"}, \"p\"}",
          "   }",
          "",
          ""
        ],
        "parameters" : [
          " * mapping - Table of action to key mappings",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:bindHotKeys(table)",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:bindHotKeys(table)",
        "name" : "bindHotKeys"
      },
      {
        "doc" : "Display a hs.chooser with all contexts and apply selected.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "desc" : "Display a hs.chooser with all contexts and apply selected.",
        "stripped_doc" : [
          "Display a hs.chooser with all contexts and apply selected.",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "Contexts:chooser()",
        "name" : "chooser"
      },
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "desc" : "Enable or disable debugging",
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "def" : "Contexts:debug(enable)",
        "name" : "debug"
      },
      {
        "doc" : "Initializes a Contexts\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Initializes a Contexts",
        "stripped_doc" : [
          "Initializes a Contexts",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:init()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:init()",
        "name" : "init"
      },
      {
        "doc" : "Start background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Start background activity.",
        "stripped_doc" : [
          "Start background activity.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:start()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Stop background activity.",
        "stripped_doc" : [
          "Stop background activity.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:stop()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:stop()",
        "name" : "stop"
      },
      {
        "doc" : "Unapply context:\n\n1) Calls config.exitFunction() if present.\n\n2) Saves context in Contet.previous for a subsequent call to Contexts.\n\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "desc" : "Unapply context:",
        "stripped_doc" : [
          "Unapply context:",
          "",
          "1) Calls config.exitFunction() if present.",
          "",
          "2) Saves context in Contet.previous for a subsequent call to Contexts.",
          "",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:unapply()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on error"
        ],
        "def" : "Contexts:unapply()",
        "name" : "unapply"
      }
    ],
    "Method" : [
      {
        "doc" : "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "desc" : "Enable or disable debugging",
        "stripped_doc" : [
          "Enable or disable debugging",
          ""
        ],
        "parameters" : [
          " * enable - Boolean indicating whether debugging should be on",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:debug(enable)",
        "type" : "Method",
        "returns" : [
          " * Nothing"
        ],
        "def" : "Contexts:debug(enable)",
        "name" : "debug"
      },
      {
        "doc" : "Initializes a Contexts\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Initializes a Contexts",
        "stripped_doc" : [
          "Initializes a Contexts",
          "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua",
          "from the relevant s.",
          "Do generally not perform any work, map any hotkeys, start any timers\/watchers\/etc.",
          "in the main scope of your init.lua. Instead, it should simply prepare an object",
          "with methods to be used later, then return the object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:init()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:init()",
        "name" : "init"
      },
      {
        "doc" : "Start background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Start background activity.",
        "stripped_doc" : [
          "Start background activity.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:start()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:start()",
        "name" : "start"
      },
      {
        "doc" : "Stop background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "desc" : "Stop background activity.",
        "stripped_doc" : [
          "Stop background activity.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:stop()",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:stop()",
        "name" : "stop"
      },
      {
        "doc" : "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames\/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * Contexts object",
        "desc" : "The method accepts a single parameter, which is a table. The keys of the table",
        "stripped_doc" : [
          "The method accepts a single parameter, which is a table. The keys of the table",
          "are strings that describe the action performed, and the values of the table are",
          "tables containing modifiers and keynames\/keycodes. E.g.",
          "  {",
          "    chooser = {{\"cmd\", \"alt\"}, \"c\"},",
          "    previous = {{\"cmd\", \"alt\"}, \"p\"}",
          "   }",
          "",
          ""
        ],
        "parameters" : [
          " * mapping - Table of action to key mappings",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:bindHotKeys(table)",
        "type" : "Method",
        "returns" : [
          " * Contexts object"
        ],
        "def" : "Contexts:bindHotKeys(table)",
        "name" : "bindHotKeys"
      },
      {
        "doc" : "Apply given context:\n\n1) Calls unapply() on the previously applied context.\n\n2) Calls config.enterFunction() if present\n\n3) Starts any applications listed in config.layout if they are not running.\n\n4) Unminimizes and raises any windows listed in config.layout if needed.\n\n5) Applies config.layout with hs.layout.apply()\n\n6) Focuses the window given in config.focused\n\n7) Sets the default input device found in defaultInputDevice\n\n8) Sets the default output device found in defaultOutputDevice\n\nParameters:\n* None\n\nReturns:\n* true on success, false on failure",
        "desc" : "Apply given context:",
        "stripped_doc" : [
          "Apply given context:",
          "",
          "1) Calls unapply() on the previously applied context.",
          "",
          "2) Calls config.enterFunction() if present",
          "",
          "3) Starts any applications listed in config.layout if they are not running.",
          "",
          "4) Unminimizes and raises any windows listed in config.layout if needed.",
          "",
          "5) Applies config.layout with hs.layout.apply()",
          "",
          "6) Focuses the window given in config.focused",
          "",
          "7) Sets the default input device found in defaultInputDevice",
          "",
          "8) Sets the default output device found in defaultOutputDevice",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:apply()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on failure"
        ],
        "def" : "Contexts:apply()",
        "name" : "apply"
      },
      {
        "doc" : "Unapply context:\n\n1) Calls config.exitFunction() if present.\n\n2) Saves context in Contet.previous for a subsequent call to Contexts.\n\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "desc" : "Unapply context:",
        "stripped_doc" : [
          "Unapply context:",
          "",
          "1) Calls config.exitFunction() if present.",
          "",
          "2) Saves context in Contet.previous for a subsequent call to Contexts.",
          "",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:unapply()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on error"
        ],
        "def" : "Contexts:unapply()",
        "name" : "unapply"
      },
      {
        "doc" : "Switch to previous context stored in Contexts.previous by unapply()\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "desc" : "Switch to previous context stored in Contexts.previous by unapply()",
        "stripped_doc" : [
          "Switch to previous context stored in Contexts.previous by unapply()",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:applyPrevious()",
        "type" : "Method",
        "returns" : [
          "* true on success, false on error"
        ],
        "def" : "Contexts:applyPrevious()",
        "name" : "applyPrevious"
      },
      {
        "doc" : "Display a hs.chooser with all contexts and apply selected.\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "desc" : "Display a hs.chooser with all contexts and apply selected.",
        "stripped_doc" : [
          "Display a hs.chooser with all contexts and apply selected.",
          ""
        ],
        "parameters" : [
          "* None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "Contexts:chooser()",
        "type" : "Method",
        "returns" : [
          "* Nothing"
        ],
        "def" : "Contexts:chooser()",
        "name" : "chooser"
      }
    ],
    "Command" : [

    ],
    "doc" : "Allow defining contexts and switching between them.\nA context is a set of windows around hs.layout and other\nstate.",
    "Field" : [

    ],
    "name" : "Contexts"
  }
]
