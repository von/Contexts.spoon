[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [
      {
        "def": "Contexts.new()",
        "desc": "Create a new Contexts instance",
        "doc": "Create a new Contexts instance\n\nParameters:\n* config: A table containing the following keys:\n  * title (string) [Required]: Title of context for display to user\n  * image (hs.image) [Optional]: chooser() will use this image\n  * layout (table) [Optional]: A table suitable for use with hs.layout.apply\n  * enterFunction (function) [Optional]: A function called when context is applied\n  * exitFunction (function) [Optional]: A function called when context is exited\n  * focused (dictionary) [Optional]: Window to focus on. First element is application,\n    second optional element is window name.\n  * defaultInputDevice (table) [Optional]: List of strings identifying input audio\n    devices.  First input device found, will be set to the default.\n  * defaultOutputDevice (table) [Optional]: List of strings identifying output\n    audio devices. First output device found, will be set to the default.\n\nReturns:\n* Contexts instance",
        "name": "new",
        "parameters": [
          "* config: A table containing the following keys:",
          "  * title (string) [Required]: Title of context for display to user",
          "  * image (hs.image) [Optional]: chooser() will use this image",
          "  * layout (table) [Optional]: A table suitable for use with hs.layout.apply",
          "  * enterFunction (function) [Optional]: A function called when context is applied",
          "  * exitFunction (function) [Optional]: A function called when context is exited",
          "  * focused (dictionary) [Optional]: Window to focus on. First element is application,",
          "    second optional element is window name.",
          "  * defaultInputDevice (table) [Optional]: List of strings identifying input audio",
          "    devices.  First input device found, will be set to the default.",
          "  * defaultOutputDevice (table) [Optional]: List of strings identifying output",
          "    audio devices. First output device found, will be set to the default."
        ],
        "returns": [
          "* Contexts instance"
        ],
        "signature": "Contexts.new()",
        "stripped_doc": "",
        "type": "Constructor"
      }
    ],
    "Deprecated": [],
    "Field": [],
    "Function": [
      {
        "def": "Contexts:applyPrevious()",
        "desc": "Switch to previous context stored in Contexts.previous by unapply()",
        "doc": "Switch to previous context stored in Contexts.previous by unapply()\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "name": "applyPrevious",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on success, false on error"
        ],
        "signature": "Contexts:applyPrevious()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"},\n    reapply = {{\"cmd\", \"alt\"}, \"r\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * Contexts object",
        "name": "bindHotKeys",
        "parameters": [
          " * mapping - Table of action to key mappings"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"},\n    reapply = {{\"cmd\", \"alt\"}, \"r\"}\n   }",
        "type": "Function"
      },
      {
        "def": "Contexts:chooser()",
        "desc": "Display a hs.chooser with all contexts and apply selected.",
        "doc": "Display a hs.chooser with all contexts and apply selected.\nIf the Context has an 'image' attribute, it will be used next\nto the title\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "Contexts:chooser()",
        "stripped_doc": "If the Context has an 'image' attribute, it will be used next\nto the title",
        "type": "Function"
      },
      {
        "def": "Contexts:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "Contexts:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:init()",
        "desc": "Initializes a Contexts",
        "doc": "Initializes a Contexts\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers/watchers/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:init()",
        "stripped_doc": "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers/watchers/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.",
        "type": "Function"
      },
      {
        "def": "Contexts:reapply()",
        "desc": "Reapply the current Context. This is equivalent to calling apply(true) fur",
        "doc": "Reapply the current Context. This is equivalent to calling apply(true) fur\nthe current context.\n\nParameters:\n* None\n\nReturns:\n* True on success, false on error",
        "name": "reapply",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True on success, false on error"
        ],
        "signature": "Contexts:reapply()",
        "stripped_doc": "the current context.",
        "type": "Function"
      },
      {
        "def": "Contexts:sealUserActions()",
        "desc": "Return a table suitable for Seal.plugins.useractions.actions",
        "doc": "Return a table suitable for Seal.plugins.useractions.actions\nTable includes an action for each context, plus an action to\nreload the current context.\nSee http://www.hammerspoon.org/Spoons/Seal.plugins.useractions.html\n\nParameters:\n* None\n\nReturns:\n* Table of Seal user actions, nil on error",
        "name": "sealUserActions",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Table of Seal user actions, nil on error"
        ],
        "signature": "Contexts:sealUserActions()",
        "stripped_doc": "Table includes an action for each context, plus an action to\nreload the current context.\nSee http://www.hammerspoon.org/Spoons/Seal.plugins.useractions.html",
        "type": "Function"
      },
      {
        "def": "Contexts:start()",
        "desc": "Start background activity.",
        "doc": "Start background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:start()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:stop()",
        "desc": "Stop background activity.",
        "doc": "Stop background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:stop()",
        "stripped_doc": "",
        "type": "Function"
      }
    ],
    "Method": [
      {
        "def": "Contexts:apply()",
        "desc": "Apply given context:",
        "doc": "Apply given context:\n\n1) Calls unapply() on the previously applied context (unless we are reapplying)\n\nFollowing is handled by _apply():\n\n2) Calls config.enterFunction() if present and not reapplying\n\n5) Applies config.layout with hs.layout.apply()\n\n6) Creates a set of hs.window.filters subscriptions for each application/window\n   in the given layout and applies the relevant portion of the layout\n   when relevant new windows are created. Skipped if reapplying.\n\n7) Focuses the window given in config.focused if not reapplying.\n\n8) Sets the default input device found in defaultInputDevice\n\n9) Sets the default output device found in defaultOutputDevice\n\nParameters:\n* reapply [optional]: True if we are re-applying a context.\n\nReturns:\n* true on success, false on failure",
        "name": "apply",
        "parameters": [
          "* reapply [optional]: True if we are re-applying a context."
        ],
        "returns": [
          "* true on success, false on failure"
        ],
        "signature": "Contexts:apply()",
        "stripped_doc": "1) Calls unapply() on the previously applied context (unless we are reapplying)\nFollowing is handled by _apply():\n2) Calls config.enterFunction() if present and not reapplying\n5) Applies config.layout with hs.layout.apply()\n6) Creates a set of hs.window.filters subscriptions for each application/window\n   in the given layout and applies the relevant portion of the layout\n   when relevant new windows are created. Skipped if reapplying.\n7) Focuses the window given in config.focused if not reapplying.\n8) Sets the default input device found in defaultInputDevice\n9) Sets the default output device found in defaultOutputDevice",
        "type": "Method"
      },
      {
        "def": "Contexts:unapply()",
        "desc": "Unapply context:",
        "doc": "Unapply context:\n\n1) Calls config.exitFunction() if present.\n\n2) Saves context in Contet.previous for a subsequent call to Contexts.\n\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "name": "unapply",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on success, false on error"
        ],
        "signature": "Contexts:unapply()",
        "stripped_doc": "1) Calls config.exitFunction() if present.\n2) Saves context in Contet.previous for a subsequent call to Contexts.",
        "type": "Method"
      }
    ],
    "Variable": [],
    "desc": "A context is based on a hs.layout configuration of",
    "doc": "A context is based on a hs.layout configuration of\na set of applications and windows and their layout\nand adds the following:\n* Allows for functions that are called when the layout is applied\n  and unapplied.\n* Creates a set of hs.window.filter subscriptions for windows in the\n  layout and applies the relevant portion of the layout for any relevant\n  new windows that are created.\n* Allows setting the default input and output audio device.\n* Re-applies the layout on screen layout changes.\n\nAdditionally, to allow for interactive selection of Contextsr:\n* The chooser() method creates a hs.chooser() instance to choose created layouts\n* The sealUserActions() method creates user actions for the Seal spoon for each\n  created Context.",
    "items": [
      {
        "def": "Contexts:apply()",
        "desc": "Apply given context:",
        "doc": "Apply given context:\n\n1) Calls unapply() on the previously applied context (unless we are reapplying)\n\nFollowing is handled by _apply():\n\n2) Calls config.enterFunction() if present and not reapplying\n\n5) Applies config.layout with hs.layout.apply()\n\n6) Creates a set of hs.window.filters subscriptions for each application/window\n   in the given layout and applies the relevant portion of the layout\n   when relevant new windows are created. Skipped if reapplying.\n\n7) Focuses the window given in config.focused if not reapplying.\n\n8) Sets the default input device found in defaultInputDevice\n\n9) Sets the default output device found in defaultOutputDevice\n\nParameters:\n* reapply [optional]: True if we are re-applying a context.\n\nReturns:\n* true on success, false on failure",
        "name": "apply",
        "parameters": [
          "* reapply [optional]: True if we are re-applying a context."
        ],
        "returns": [
          "* true on success, false on failure"
        ],
        "signature": "Contexts:apply()",
        "stripped_doc": "1) Calls unapply() on the previously applied context (unless we are reapplying)\nFollowing is handled by _apply():\n2) Calls config.enterFunction() if present and not reapplying\n5) Applies config.layout with hs.layout.apply()\n6) Creates a set of hs.window.filters subscriptions for each application/window\n   in the given layout and applies the relevant portion of the layout\n   when relevant new windows are created. Skipped if reapplying.\n7) Focuses the window given in config.focused if not reapplying.\n8) Sets the default input device found in defaultInputDevice\n9) Sets the default output device found in defaultOutputDevice",
        "type": "Method"
      },
      {
        "def": "Contexts:applyPrevious()",
        "desc": "Switch to previous context stored in Contexts.previous by unapply()",
        "doc": "Switch to previous context stored in Contexts.previous by unapply()\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "name": "applyPrevious",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on success, false on error"
        ],
        "signature": "Contexts:applyPrevious()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:bindHotKeys(table)",
        "desc": "The method accepts a single parameter, which is a table. The keys of the table",
        "doc": "The method accepts a single parameter, which is a table. The keys of the table\nare strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"},\n    reapply = {{\"cmd\", \"alt\"}, \"r\"}\n   }\n\n\nParameters:\n * mapping - Table of action to key mappings\n\nReturns:\n * Contexts object",
        "name": "bindHotKeys",
        "parameters": [
          " * mapping - Table of action to key mappings"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:bindHotKeys(table)",
        "stripped_doc": "are strings that describe the action performed, and the values of the table are\ntables containing modifiers and keynames/keycodes. E.g.\n  {\n    chooser = {{\"cmd\", \"alt\"}, \"c\"},\n    previous = {{\"cmd\", \"alt\"}, \"p\"},\n    reapply = {{\"cmd\", \"alt\"}, \"r\"}\n   }",
        "type": "Function"
      },
      {
        "def": "Contexts:chooser()",
        "desc": "Display a hs.chooser with all contexts and apply selected.",
        "doc": "Display a hs.chooser with all contexts and apply selected.\nIf the Context has an 'image' attribute, it will be used next\nto the title\n\nParameters:\n* None\n\nReturns:\n* Nothing",
        "name": "chooser",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Nothing"
        ],
        "signature": "Contexts:chooser()",
        "stripped_doc": "If the Context has an 'image' attribute, it will be used next\nto the title",
        "type": "Function"
      },
      {
        "def": "Contexts:debug(enable)",
        "desc": "Enable or disable debugging",
        "doc": "Enable or disable debugging\n\nParameters:\n * enable - Boolean indicating whether debugging should be on\n\nReturns:\n * Nothing",
        "name": "debug",
        "parameters": [
          " * enable - Boolean indicating whether debugging should be on"
        ],
        "returns": [
          " * Nothing"
        ],
        "signature": "Contexts:debug(enable)",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:init()",
        "desc": "Initializes a Contexts",
        "doc": "Initializes a Contexts\nWhen a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers/watchers/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "init",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:init()",
        "stripped_doc": "When a user calls hs.loadSpoon(), Hammerspoon will load and execute init.lua\nfrom the relevant s.\nDo generally not perform any work, map any hotkeys, start any timers/watchers/etc.\nin the main scope of your init.lua. Instead, it should simply prepare an object\nwith methods to be used later, then return the object.",
        "type": "Function"
      },
      {
        "def": "Contexts.new()",
        "desc": "Create a new Contexts instance",
        "doc": "Create a new Contexts instance\n\nParameters:\n* config: A table containing the following keys:\n  * title (string) [Required]: Title of context for display to user\n  * image (hs.image) [Optional]: chooser() will use this image\n  * layout (table) [Optional]: A table suitable for use with hs.layout.apply\n  * enterFunction (function) [Optional]: A function called when context is applied\n  * exitFunction (function) [Optional]: A function called when context is exited\n  * focused (dictionary) [Optional]: Window to focus on. First element is application,\n    second optional element is window name.\n  * defaultInputDevice (table) [Optional]: List of strings identifying input audio\n    devices.  First input device found, will be set to the default.\n  * defaultOutputDevice (table) [Optional]: List of strings identifying output\n    audio devices. First output device found, will be set to the default.\n\nReturns:\n* Contexts instance",
        "name": "new",
        "parameters": [
          "* config: A table containing the following keys:",
          "  * title (string) [Required]: Title of context for display to user",
          "  * image (hs.image) [Optional]: chooser() will use this image",
          "  * layout (table) [Optional]: A table suitable for use with hs.layout.apply",
          "  * enterFunction (function) [Optional]: A function called when context is applied",
          "  * exitFunction (function) [Optional]: A function called when context is exited",
          "  * focused (dictionary) [Optional]: Window to focus on. First element is application,",
          "    second optional element is window name.",
          "  * defaultInputDevice (table) [Optional]: List of strings identifying input audio",
          "    devices.  First input device found, will be set to the default.",
          "  * defaultOutputDevice (table) [Optional]: List of strings identifying output",
          "    audio devices. First output device found, will be set to the default."
        ],
        "returns": [
          "* Contexts instance"
        ],
        "signature": "Contexts.new()",
        "stripped_doc": "",
        "type": "Constructor"
      },
      {
        "def": "Contexts:reapply()",
        "desc": "Reapply the current Context. This is equivalent to calling apply(true) fur",
        "doc": "Reapply the current Context. This is equivalent to calling apply(true) fur\nthe current context.\n\nParameters:\n* None\n\nReturns:\n* True on success, false on error",
        "name": "reapply",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* True on success, false on error"
        ],
        "signature": "Contexts:reapply()",
        "stripped_doc": "the current context.",
        "type": "Function"
      },
      {
        "def": "Contexts:sealUserActions()",
        "desc": "Return a table suitable for Seal.plugins.useractions.actions",
        "doc": "Return a table suitable for Seal.plugins.useractions.actions\nTable includes an action for each context, plus an action to\nreload the current context.\nSee http://www.hammerspoon.org/Spoons/Seal.plugins.useractions.html\n\nParameters:\n* None\n\nReturns:\n* Table of Seal user actions, nil on error",
        "name": "sealUserActions",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* Table of Seal user actions, nil on error"
        ],
        "signature": "Contexts:sealUserActions()",
        "stripped_doc": "Table includes an action for each context, plus an action to\nreload the current context.\nSee http://www.hammerspoon.org/Spoons/Seal.plugins.useractions.html",
        "type": "Function"
      },
      {
        "def": "Contexts:start()",
        "desc": "Start background activity.",
        "doc": "Start background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:start()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:stop()",
        "desc": "Stop background activity.",
        "doc": "Stop background activity.\n\nParameters:\n * None\n\nReturns:\n * Contexts object",
        "name": "stop",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * Contexts object"
        ],
        "signature": "Contexts:stop()",
        "stripped_doc": "",
        "type": "Function"
      },
      {
        "def": "Contexts:unapply()",
        "desc": "Unapply context:",
        "doc": "Unapply context:\n\n1) Calls config.exitFunction() if present.\n\n2) Saves context in Contet.previous for a subsequent call to Contexts.\n\n\nParameters:\n* None\n\nReturns:\n* true on success, false on error",
        "name": "unapply",
        "parameters": [
          "* None"
        ],
        "returns": [
          "* true on success, false on error"
        ],
        "signature": "Contexts:unapply()",
        "stripped_doc": "1) Calls config.exitFunction() if present.\n2) Saves context in Contet.previous for a subsequent call to Contexts.",
        "type": "Method"
      }
    ],
    "name": "Contexts",
    "stripped_doc": "a set of applications and windows and their layout\nand adds the following:\n* Allows for functions that are called when the layout is applied\n  and unapplied.\n* Creates a set of hs.window.filter subscriptions for windows in the\n  layout and applies the relevant portion of the layout for any relevant\n  new windows that are created.\n* Allows setting the default input and output audio device.\n* Re-applies the layout on screen layout changes.\n\nAdditionally, to allow for interactive selection of Contextsr:\n* The chooser() method creates a hs.chooser() instance to choose created layouts\n* The sealUserActions() method creates user actions for the Seal spoon for each\n  created Context.",
    "submodules": [],
    "type": "Module"
  }
]